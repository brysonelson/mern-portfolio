{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar InviewMonitor = function (_Component) {\n  _inherits(InviewMonitor, _Component);\n\n  function InviewMonitor(props) {\n    _classCallCheck(this, InviewMonitor);\n\n    var _this = _possibleConstructorReturn(this, (InviewMonitor.__proto__ || Object.getPrototypeOf(InviewMonitor)).call(this));\n\n    _this.state = {\n      className: props.classNameNotInView,\n      childProps: props.childPropsNotInView\n    };\n    _this.onIntersectionAll = _this.onIntersectionAll.bind(_this);\n    _this.onIntersection = _this.onIntersection.bind(_this);\n    _this.isFirstInView = true;\n    return _this;\n  }\n\n  _createClass(InviewMonitor, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (!window.IntersectionObserver) {\n        console.error('react-inview-monitor found no support for IntersectionObserver.\\nPerhaps use a polyfill like: https://cdn.polyfill.io/v2/polyfill.js?features=IntersectionObserver ?');\n        return;\n      }\n\n      var _props = this.props,\n          useInviewMonitor = _props.useInviewMonitor,\n          intoViewMargin = _props.intoViewMargin;\n\n      if (!this._element || !useInviewMonitor || typeof useInviewMonitor === 'function' && !useInviewMonitor()) {\n        return;\n      }\n\n      var options = {\n        rootMargin: intoViewMargin // any performance benefits from trying to re-use the observer?\n        // possible enhancement to add later on.\n\n      };\n      this.observer = new window.IntersectionObserver(this.onIntersectionAll, options);\n      this.observer.observe(this._element);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.observer && this.observer.disconnect();\n    }\n  }, {\n    key: 'onIntersectionAll',\n    value: function onIntersectionAll(entries) {\n      entries.forEach(this.onIntersection);\n    }\n  }, {\n    key: 'onIntersection',\n    value: function onIntersection(entry) {\n      if (entry.target !== this._element) {\n        // this check only makes sense as long as we _dont_ share the same observer\n        // between component instances.\n        return;\n      }\n\n      var _props2 = this.props,\n          classNameNotInView = _props2.classNameNotInView,\n          classNameInView = _props2.classNameInView,\n          classNameAboveView = _props2.classNameAboveView,\n          classNameNotAboveView = _props2.classNameNotAboveView,\n          toggleClassNameOnInView = _props2.toggleClassNameOnInView,\n          childPropsInView = _props2.childPropsInView,\n          childPropsNotInView = _props2.childPropsNotInView,\n          toggleChildPropsOnInView = _props2.toggleChildPropsOnInView,\n          onInView = _props2.onInView,\n          onNotInView = _props2.onNotInView,\n          repeatOnInView = _props2.repeatOnInView;\n      var nowInView = entry.isIntersecting;\n      var isFirstInView = nowInView && this.isFirstInView;\n\n      if (isFirstInView) {\n        // single out just the first inView\n        this.isFirstInView = false;\n      }\n\n      var toggleClassBehavior = (typeof classNameInView === 'string' || typeof classNameAboveView === 'string') && toggleClassNameOnInView;\n      var tooglePropsBehavior = childPropsInView && toggleChildPropsOnInView;\n      var toggleOnInViewBehavior = (onInView || onNotInView) && repeatOnInView;\n      var toggleBehavior = toggleClassBehavior || tooglePropsBehavior || toggleOnInViewBehavior;\n\n      if (nowInView && !toggleBehavior) {\n        var changes = {};\n        if (typeof classNameInView === 'string') changes.className = classNameInView;\n        if (childPropsInView) changes.childProps = childPropsInView;\n\n        if (Object.keys(changes).length) {\n          this.setState(changes);\n        }\n\n        if (onInView && typeof onInView === 'function') {\n          onInView(entry);\n        }\n\n        this.observer.unobserve(entry.target); // is there any point trying to determine whether observer is now\n        // no longer observering anything, and hence should be disconnected,\n        // or is this kind of automatic?\n        // To be investigated.\n\n        return;\n      }\n\n      if (toggleBehavior) {\n        // Check if we scrolled past view\n        if (typeof classNameAboveView === 'string') {\n          if ( // we just left the view\n          !nowInView && // are we now above it (i.e. scrolled past)\n          entry.boundingClientRect.top <= 0) {\n            this.setState({\n              className: classNameAboveView\n            });\n          } else {\n            this.setState({\n              className: classNameNotAboveView || ''\n            });\n          }\n\n          return;\n        } // check regular in/out of view\n\n\n        if (nowInView) {\n          // just entered view\n          var _changes = {};\n          if (toggleClassBehavior || isFirstInView) _changes.className = classNameInView;\n          if (tooglePropsBehavior || isFirstInView) _changes.childProps = childPropsInView;\n\n          if (Object.keys(_changes).length) {\n            this.setState(_changes);\n          }\n\n          if (onInView && typeof onInView === 'function') {\n            onInView(entry);\n          }\n        } else {\n          // just left view\n          var _changes2 = {};\n          if (toggleClassBehavior) _changes2.className = classNameNotInView;\n          if (tooglePropsBehavior) _changes2.childProps = childPropsNotInView;\n\n          if (Object.keys(_changes2).length) {\n            this.setState(_changes2);\n          }\n\n          if (onNotInView && typeof onNotInView === 'function') {\n            onNotInView(entry);\n          }\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _state = this.state,\n          childProps = _state.childProps,\n          className = _state.className;\n      var _props3 = this.props,\n          useInviewMonitor = _props3.useInviewMonitor,\n          children = _props3.children;\n\n      if (childProps && Object.keys(childProps).length) {\n        children = _react2.default.cloneElement(children, childProps);\n      }\n\n      return _react2.default.createElement('div', {\n        className: className,\n        ref: function ref(e) {\n          if (e) {\n            _this2._element = e;\n          }\n        }\n      }, children);\n    }\n  }]);\n\n  return InviewMonitor;\n}(_react.Component);\n\nInviewMonitor.propTypes = {\n  // common usage: animate classes in onScrollIntoView, to trigger fade in etc animations\n  classNameInView: _propTypes2.default.string,\n  // can be used to hide elements to be animated in.\n  classNameNotInView: _propTypes2.default.string,\n  // can be used as a trigger for \"scrolled past view\", f.e. for sticky headers\n  classNameAboveView: _propTypes2.default.string,\n  classNameNotAboveView: _propTypes2.default.string,\n  // can be used to switch classes on/off, for fixed navigation based on scroll point, etc\n  toggleClassNameOnInView: _propTypes2.default.bool,\n  // another use for the InviewMonitor is to start passing a prop into an element\n  // only when it has been scrolled into view; f.e. to autoplay a video.\n  childPropsInView: _propTypes2.default.object,\n  childPropsNotInView: _propTypes2.default.object,\n  // can be used to turn prop(s) on/off based of on view, f.e. stop/start video/sound\n  toggleChildPropsOnInView: _propTypes2.default.bool,\n  // can be used to track elements coming into view\n  onInView: _propTypes2.default.func,\n  onNotInView: _propTypes2.default.func,\n  repeatOnInView: _propTypes2.default.bool,\n  // whether to run any scroll monintoring at all;\n  // because easier to toggle this prop, then toggle not using the component at all.\n  useInviewMonitor: _propTypes2.default.func,\n  intoViewMargin: _propTypes2.default.string\n};\nInviewMonitor.defaultProps = {\n  classNameNotInView: '',\n  childPropsNotInView: {},\n  useInviewMonitor: function useInviewMonitor() {\n    return true;\n  },\n  intoViewMargin: '-20%'\n};\nexports.default = InviewMonitor;","map":null,"metadata":{},"sourceType":"script"}